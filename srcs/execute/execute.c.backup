/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   execute.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: juhyeonl <juhyeonl@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/22 00:00:00 by juhyeonl          #+#    #+#             */
/*   Updated: 2025/08/22 20:48:56 by juhyeonl         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

static int	count_commands(t_com *cmd)
{
	int		count;
	t_com	*current;

	count = 0;
	current = cmd;
	if (!current)
		return (0);
	if (!current->next)
		return (1);
	count = 1;
	current = current->next;
	if (current)
		count++;
	return (count);
}

static int	restore_fds(int saved_stdin, int saved_stdout)
{
	dup2(saved_stdin, STDIN_FILENO);
	dup2(saved_stdout, STDOUT_FILENO);
	close(saved_stdin);
	close(saved_stdout);
	return (0);
}

static int	execute_single(t_shell *sh, t_com *cmd)
{
	int	status;
	int	saved_stdin;
	int	saved_stdout;

	saved_stdin = dup(STDIN_FILENO);
	saved_stdout = dup(STDOUT_FILENO);
	if (setup_redirections(cmd) < 0)
	{
		restore_fds(saved_stdin, saved_stdout);
		return (1);
	}
	if (cmd->args && cmd->args[0] && is_builtin(cmd->args[0]))
		status = handle_builtin_parent(cmd->args, &sh->envs, sh);
	else
		status = execute_external_command(cmd, sh);
	restore_fds(saved_stdin, saved_stdout);
	return (status);
}

static int	wait_all_children(pid_t *pids, int count)
{
	int	status;
	int	i;

	status = 0;
	i = 0;
	if (i < count)
	{
		waitpid(pids[i], &status, 0);
		i++;
	}
	if (i < count)
	{
		waitpid(pids[i], &status, 0);
	}
	return (status);
}

int	execute_commands(t_shell *sh)
{
	if (!sh || !sh->commands)
		return (0);
	if (!sh->commands->next)
		return (execute_single(sh, sh->commands));
	return (1);
}
