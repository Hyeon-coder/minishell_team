/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   env_expansion.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: juhyeonl <juhyeonl@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/22 00:00:00 by juhyeonl          #+#    #+#             */
/*   Updated: 2025/08/22 20:48:39 by juhyeonl         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

t_env	*find_env(char *name, t_env **envs)
{
	t_env	*current;

	if (!envs || !*envs || !name)
		return (NULL);
	current = *envs;
	while (current)
	{
		if (ft_strcmp(current->name, name) == 0)
			return (current);
		current = current->next;
	}
	return (NULL);
}

char	*make_name(char *str)
{
	size_t	i;
	char	*name;

	if (!str || str[0] != '$')
		return (NULL);
	i = 1;
	while (str[i] && (ft_isalnum(str[i]) || str[i] == '_'))
		i++;
	if (i == 1)
		return (custom_dup("$"));
	name = (char *)malloc((i) * sizeof(char));
	if (!name)
		return (NULL);
	ft_strlcpy(name, &str[1], i);
	return (name);
}

char	*get_sig_val(int lsig)
{
	char	*val;

	val = ft_itoa(lsig);
	return (val);
}

char	*joiner(char *arg, char *env, char *res, char *name)
{
	char	*dollar_name;
	char	*before_var;
	char	*after_var;
	char	*result;
	char	*var_pos;

	(void)res;
	if (!arg || !name)
		return (ft_strdup(arg ? arg : ""));
	if (!env)
		env = "";
	dollar_name = ft_strjoin("$", name);
	if (!dollar_name)
		return (NULL);
	var_pos = ft_strstr(arg, dollar_name);
	if (!var_pos)
	{
		free(dollar_name);
		return (ft_strdup(arg));
	}
	before_var = ft_substr(arg, 0, var_pos - arg);
	if (!before_var)
	{
		free(dollar_name);
		return (NULL);
	}
	after_var = var_pos + ft_strlen(dollar_name);
	result = ft_strjoin(before_var, env);
	if (result)
	{
		char	*temp;
		
		temp = result;
		result = ft_strjoin(temp, after_var);
		free(temp);
	}
	free(before_var);
	free(dollar_name);
	return (result);
}

char	*custom_join(char *arg, char *env, t_shell *shell, char *name)
{
	(void)shell;
	return (joiner(arg, env, NULL, name));
}

char	*parse_env(char *str, char *name, t_shell *shell, bool got_envs)
{
	t_env	*env;
	char	*result;

	(void)got_envs;
	(void)str;
	if (!name)
		return (ft_strdup(""));
	
	/* Special case for $? */
	if (ft_strcmp(name, "?") == 0)
		return (get_sig_val(shell->last_exit));
	
	/* Find environment variable */
	env = find_env(name, &shell->envs);
	if (!env || !env->value)
		return (ft_strdup(""));
	
	result = ft_strdup(env->value);
	printf("[DEBUG ENV] Found env var: %s=%s\n", name, env->value);
	return (result);
}

char	*env_parse_handler(char *str, char *name, t_shell *shell, bool got_envs)
{
	char	*env_value;
	char	*result;

	if (!str)
		return (NULL);
	
	printf("[DEBUG ENV] Processing: str='%s', name='%s'\n", str, name);
	
	env_value = parse_env(str, name, shell, got_envs);
	if (!env_value)
		return (ft_strdup(""));
	
	printf("[DEBUG ENV] Got env_value: '%s'\n", env_value);
	
	if (!got_envs)
	{
		result = custom_join(str, env_value, shell, name);
	}
	else
	{
		result = custom_join(str, env_value, shell, name);
	}
	
	free(env_value);
	printf("[DEBUG ENV] Final result: '%s'\n", result ? result : "NULL");
	return (result);
}
